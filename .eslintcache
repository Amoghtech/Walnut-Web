[{"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\index.js":"1","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\App.js":"2","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\CSVReader.js":"3","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Chart.js":"4","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\PapaParser.js":"5","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Loader.js":"6","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Data.js":"7","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\List.js":"8","C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\List-item.js":"9"},{"size":142,"mtime":1616579686000,"results":"10","hashOfConfig":"11"},{"size":3231,"mtime":1628710611861,"results":"12","hashOfConfig":"11"},{"size":2317,"mtime":1628660883827,"results":"13","hashOfConfig":"11"},{"size":2480,"mtime":1628687041366,"results":"14","hashOfConfig":"11"},{"size":5313,"mtime":1628710305484,"results":"15","hashOfConfig":"11"},{"size":229,"mtime":1628667684505,"results":"16","hashOfConfig":"11"},{"size":898,"mtime":1628686788290,"results":"17","hashOfConfig":"11"},{"size":1392,"mtime":1628710564262,"results":"18","hashOfConfig":"11"},{"size":145,"mtime":1628689921299,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7n2kmw",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\index.js",[],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\App.js",[],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\CSVReader.js",[],["41","42"],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Chart.js",[],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\PapaParser.js",["43"],"import { useState } from 'react';\r\nimport { parse } from 'papaparse';\r\nimport './Papaparser.css';\r\nimport Loader from './Loader';\r\n\r\nconst monthNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nfunction Papaparser({\r\n  setCsvArray,\r\n  setCsvHeader,\r\n  setloader,\r\n  setamounts,\r\n  setcurrmonth,\r\n}) {\r\n  const [highlighted, sethighlighted] = useState(false);\r\n\r\n  const [border, setborder] = useState(false);\r\n  const handleChange = async (e) => {\r\n    setloader(true);\r\n    let file = e.target.files[0];\r\n    const str = await file.text();\r\n    let temp = str;\r\n    for (let i = 0; i < 6; i++) {\r\n      //   x = str.indexOf('\\n');\r\n      temp = temp.slice(temp.indexOf('\\n') + 1);\r\n    }\r\n\r\n    const res = parse(temp, { header: true });\r\n    let months = [];\r\n    let t = res.data[0].AMOUNT.split(',');\r\n    let s = t[0] + t[1];\r\n    let m = +res.data[0].DATE.split('-')[1].replace(/^0+/, ''),\r\n      c = +s;\r\n    for (let i = 1; i < res.data.length; i++) {\r\n      if (res.data[i].AMOUNT === undefined || res.data[i].AMOUNT === '') {\r\n        break;\r\n      }\r\n      if (\r\n        res.data[i].DATE.split('-')[1] !== res.data[i - 1].DATE.split('-')[1]\r\n      ) {\r\n        months.push({ month: m, amount: c });\r\n\r\n        t = res.data[i].AMOUNT.split(',');\r\n        if (t.length === 1) {\r\n          s = +t[0];\r\n        } else {\r\n          s = +(t[0] + t[1]);\r\n        }\r\n        c = s;\r\n\r\n        m = +res.data[i].DATE.split('-')[1].replace(/^0+/, '');\r\n      } else {\r\n        t = res.data[i].AMOUNT.split(',');\r\n        console.log('t: ', t);\r\n        if (t.length === 1) {\r\n          s = +t[0];\r\n        } else {\r\n          s = +(t[0] + t[1]);\r\n        }\r\n        c = c + s;\r\n      }\r\n    }\r\n\r\n    months.push({ month: m, amount: c });\r\n\r\n    setTimeout(() => {\r\n      const date = new Date();\r\n      let g;\r\n      months.forEach((m) => {\r\n        if (m.month - 1 === date.getMonth()) {\r\n          g = m.amount;\r\n        }\r\n      });\r\n      setcurrmonth({ name: monthNames[date.getMonth()], amount: g });\r\n      setamounts(months);\r\n      setCsvArray(res.data);\r\n\r\n      setCsvHeader(Object.keys(res.data[0]));\r\n      setloader(false);\r\n    }, 2000);\r\n  };\r\n  return (\r\n    <div className='input-container'>\r\n      <div\r\n        className={`dropper ${highlighted && 'highlight'} ${border && 'bdr'}`}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n        onDragEnter={() => {\r\n          sethighlighted(true);\r\n          setborder(true);\r\n        }}\r\n        onDragLeave={() => {\r\n          sethighlighted(false);\r\n        }}\r\n        onDrop={(e) => {\r\n          e.preventDefault();\r\n          setborder(false);\r\n          setloader(true);\r\n          Array.from(e.dataTransfer.files).forEach(async (file) => {\r\n            const str = await file.text();\r\n\r\n            let temp = str;\r\n            for (let i = 0; i < 6; i++) {\r\n              //   x = str.indexOf('\\n');\r\n              temp = temp.slice(temp.indexOf('\\n') + 1);\r\n            }\r\n\r\n            const res = parse(temp, { header: true });\r\n            let months = [];\r\n            let t = res.data[0].AMOUNT.split(',');\r\n            let s = t[0] + t[1];\r\n            let m = +res.data[0].DATE.split('-')[1].replace(/^0+/, ''),\r\n              c = +s;\r\n            for (let i = 1; i < res.data.length; i++) {\r\n              if (\r\n                res.data[i].AMOUNT === undefined ||\r\n                res.data[i].AMOUNT === ''\r\n              ) {\r\n                break;\r\n              }\r\n              if (\r\n                res.data[i].DATE.split('-')[1] !==\r\n                res.data[i - 1].DATE.split('-')[1]\r\n              ) {\r\n                months.push({ month: m, amount: c });\r\n\r\n                t = res.data[i].AMOUNT.split(',');\r\n                if (t.length === 1) {\r\n                  s = +t[0];\r\n                } else {\r\n                  s = +(t[0] + t[1]);\r\n                }\r\n                c = s;\r\n\r\n                m = +res.data[i].DATE.split('-')[1].replace(/^0+/, '');\r\n              } else {\r\n                t = res.data[i].AMOUNT.split(',');\r\n                console.log('t: ', t);\r\n                if (t.length === 1) {\r\n                  s = +t[0];\r\n                } else {\r\n                  s = +(t[0] + t[1]);\r\n                }\r\n                c = c + s;\r\n              }\r\n            }\r\n\r\n            months.push({ month: m, amount: c });\r\n\r\n            setTimeout(() => {\r\n              const date = new Date();\r\n              let g;\r\n              months.forEach((m) => {\r\n                if (m.month - 1 === date.getMonth()) {\r\n                  g = m.amount;\r\n                }\r\n              });\r\n              setcurrmonth({ name: monthNames[date.getMonth()], amount: g });\r\n              setamounts(months);\r\n              setCsvArray(res.data);\r\n\r\n              setCsvHeader(Object.keys(res.data[0]));\r\n              setloader(false);\r\n            }, 2000);\r\n          });\r\n        }}\r\n      >\r\n        DROP HERE\r\n      </div>\r\n      <div className=\"input-ele\">\r\n      <input\r\n        className='csv-input'\r\n        type='file'\r\n        name='file'\r\n        onChange={handleChange}\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Papaparser;\r\n",["44","45"],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Loader.js",[],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\Data.js",["46"],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\List.js",[],"C:\\Users\\ak\\Desktop\\Walnut-Web\\src\\components\\List-item.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":8,"nodeType":"53","messageId":"54","endLine":4,"endColumn":14},{"ruleId":"47","replacedBy":"55"},{"ruleId":"49","replacedBy":"56"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":14},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Loader' is defined but never used.","Identifier","unusedVar",["57"],["58"],"no-global-assign","no-unsafe-negation"]